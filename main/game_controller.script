go.property("max_puck_count", 10)
require("main.helper_func")
local global = require("main.global_variables")

local function spawn_puck(self)
	if (global.turn == 0) then
		go.set("bg#bg_color", "tint", vmath.vector4(0.2, 0.6, 1, 1))
	else
		go.set("bg#bg_color", "tint", vmath.vector4(1, 0.5, 0.5, 1))
	end

	msg.post("spawner#puck_spawner", "spawn_puck")
end

function init(self)
	self.blue_puck_list = {}
	self.red_puck_list = {}
	msg.post(".", "acquire_input_focus")
	spawn_puck(self)
end

function get_distance_from_target(puck_position)
	local center_position = go.get_position("center_point")
	return vmath.length(center_position - puck_position)
end

local function clear_board(self)
	for i = 0, #self.blue_puck_list do
		if self.blue_puck_list[i] ~= nil then
			go.delete(self.blue_puck_list[i])
		end
	end
	for i = 0, #self.red_puck_list do
		if self.red_puck_list[i] ~= nil then
			go.delete(self.red_puck_list[i])
		end
	end
	self.blue_puck_list = {}
	self.red_puck_list = {}
	msg.post("score_ui#score", "update_score", { blue_score = 0, red_score = 0 })
	msg.post("score_ui#score", "animate_score", { color = 0 })
	msg.post("score_ui#score", "animate_score", { color = 1 })
end

local function calculate_score(puck)
	local dist = get_distance_from_target(go.get_position(puck))
	local score = 0
	if (dist < 45) then
		score = 5
	elseif dist < 125 then
		score = 2
	elseif dist < 180 then
		score = 1
	else
		score = 0
	end
	return score
end

-- For Debug

function on_input(self, action_id, action)
	-- if action_id == hash("touch") then
	-- 	self.touch_pos = screen_to_world(action.x, action.y, 0, "/camera_ctrl#camera")
	-- 	local dist = get_distance_from_target(self.touch_pos)
	-- 	print(dist)
	-- end

	if action_id == hash("restart") and action.pressed then
		clear_board(self)
		global.reset_game()
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("puck_spawned") then
		if (message.turn == 0) then
			table.insert(self.blue_puck_list, message.new_puck)
		else
			table.insert(self.red_puck_list, message.new_puck)
		end
	end

	if message_id == hash("puck_stopped") then
		global.blue_score = 0
		global.red_score = 0

		for i = 1, #self.blue_puck_list do
			local newScore = calculate_score(self.blue_puck_list[i])
			factory.create("#score_factory", go.get_position(self.blue_puck_list[i]), nil,
				{ score = newScore, target_position = vmath.vector3(250, -450, 0) },
				vmath.vector3(1, 1, 1) * 0.06)
			global.blue_score = global.blue_score + newScore
		end

		for i = 1, #self.red_puck_list do
			local newScore = calculate_score(self.red_puck_list[i])
			global.red_score = global.red_score + newScore
			factory.create("#score_factory", go.get_position(self.red_puck_list[i]), nil,
				{ score = newScore, target_position = vmath.vector3(-250, -450, 0) },
				vmath.vector3(1, 1, 1) * 0.06)
		end

		msg.post("score_ui#score", "update_score", { blue_score = global.blue_score, red_score = global.red_score })
		global.change_turn()
	end

	if message_id == hash("score_calculated") then
		local blue_count = #self.blue_puck_list
		local red_count = #self.red_puck_list
		print("red count ", #self.red_puck_list)
		print("blue count ", #self.blue_puck_list)
		if red_count == self.max_puck_count and blue_count == self.max_puck_count then
			if global.blue_score == global.red_score then
				global.winner = -1
			elseif global.blue_score > global.red_score then
				global.winner = 0
			else
				global.winner = 1
			end
			msg.post("end_screen#end_screen", "game_complete", { winner = global.winner })
		else
			spawn_puck(self)
		end
	end

	if message_id == hash("restart_game") then
		print("Restart Called")
		clear_board(self)
	end
end
